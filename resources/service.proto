/* Task object blah blah adsd
sfsf fafasf affaf fasfaf
*/
syntax = "proto3";
package logtask;

option java_package = "com.google.protobuf";

import public "test/publicx.proto";
import "test/meh/privatex.proto";

// LogTask is a service which handles operations on tasks defined via a custom DSL
service LogTask {
  // foosh doc
  option foosh = true;
  // AddTask doc
  rpc AddTask (Task) returns (TaskId) {}
  rpc ListTasks(TaskListOptions) returns (TaskList) {}
  rpc UpdateTask(TaskUpdateOptions) returns (ReturnStatus) {}
  rpc DeleteTask(TaskId) returns (ReturnStatus) { 
      option crap = true;
  }
  rpc RouteChat(stream publicx.Duh) returns (stream privatex.Meh) {}
  rpc RouteCall(stream SearchResponse.Result) returns (stream publicx.SearchRequest.Request) {}
}

// Id of the Task...
message TaskId {
  option message_set_wire_format = true;
  string id = 1;
}

// Task object...
message Task {
  string name = 1;
  string id = 2;
  string desc = 3;
  string priority = 4 [deprecated=true,default="p1"];
  string for = 5;
  string on = 6;
  string starting = 7;
  string remind = 8 [deprecated=true];
  string location = 9 [default="mars"];
  repeated string tags = 10;  
  repeated string comments = 11;
  // fizzed
  oneof fizzbuzz {
    option zzz = true;
    string fizz = 12;
    int32 buzz = 13;
  }  
}

extend Task {
  int32 bar = 126;
}

// List of tasks...
message TaskList {
  repeated Task tasks = 1;
}

// Options to pass in a params for listing tasks...
message TaskListOptions {
  string status = 1;
  string for = 2;
  extensions 1000 to max;
}

// Options to pass in for updating a task...
message TaskUpdateOptions {
  TaskId taskId = 1;
  Task task = 2;
  reserved 10, 12, 9 to 11;
}

// Return status of delete and update task operations...
message ReturnStatus {
  bool success = 1;
  string message = 2;
  publicx.StatusEnum status = 3;  
  Drama drama = 4;  
  reserved "foo", "bar";
}

message SearchResponse {
  message Result {
    required string url = 1;
    string title = 2;
    repeated string snippets = 3;
  }
  repeated Result result = 1;
}

// EnumAllowingAlias docs for testing...
enum EnumAllowingAlias {
  UNKNOWN = 0;  //abcd
  STARTED = 1;
  RUNNING = 2;
}
